<!DOCTYPE html>
<html lang="en">
<head build-fn="fetch:package.json">
    <template build-src="/fn/templates.html#head-template"></template>

    <script build-remove>
    window.DEBUG = true;
    </script>

    <link rel="stylesheet" href="style.min.css" />
    <!--link rel="stylesheet" href="style.css" /-->
</head>

<body class="grid @1-6x-grid @3-9x-grid">
    <header class="x-1 3x @1-6x @2-9x @3-x-2 @3-11x" id="header">
        <template build-fn="fetch:package.json" build-src="/fn/templates.html#header-template"></template>
    </header>

    <section class="x-1 3x @1-6x @2-9x @3-x-2 grid" data-targetable id="functions">
        <header class="x-1 3x @1-4x">
            <h2 class="doctext-02">Functions</h2>
            <p class="doctext-08">Import functions from the Fn module:</p>
            <pre><code class="language-js">import { get, matches } from '/fn/module.js';</code></pre>
        </header>

        <div class="x-1 3x">
            <h4 class="doctext-03">Functions</h4>
            <template build-fn="docs:
            modules/cache.js,
            modules/compose.js,
            modules/curry.js,
            modules/choose.js,
            modules/once.js,
            modules/overload.js,
            modules/pipe.js,
            modules/weak-cache.js
            filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
        </div>

        <div class="x-1 3x @2-4x">
            <p class="doctext-08">
            The functions below are curried (where they take more than one
            parameter). They may be partially applied.
            </p>
        </div>

        <div class="x-1 3x column-grid grid">
            <div class="x-1">
                <h4 class="doctext-03">Objects</h4>
                <template build-fn="docs:
                modules/argument.js,
                modules/call.js,
                modules/equals.js,
                modules/get.js,
                modules/get-path.js,
                modules/has.js,
                modules/id.js,
                modules/invoke.js,
                modules/is.js,
                modules/is-defined.js,
                modules/matches.js,
                modules/noop.js,
                modules/not.js,
                modules/request-tick.js,
                modules/self.js,
                modules/set.js,
                modules/set-path.js,
                modules/to-array.js,
                modules/to-class.js,
                modules/to-fixed.js,
                modules/to-string.js,
                modules/to-type.js
                filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
            </div>
        </div>

        <div class="x-1 3x @1-x-4 column-grid grid">
            <div class="x-1">
                <h4 class="doctext-03">Strings</h4>
                <template build-fn="docs:
                modules/strings/append.js,
                modules/strings/prepend.js,
                modules/strings/prepad.js,
                modules/strings/postpad.js,
                modules/capture.js,
                modules/exec.js,
                modules/parse-int.js,
                modules/slugify.js,
                modules/strings/to-camel-case.js,
                modules/strings/to-plain-text.js
                filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
            </div>

            <div class="x-1">
                <h4 class="doctext-03">Maths</h4>
                <template build-fn="docs:
                modules/maths/core.js,
                modules/maths/clamp.js,
                modules/maths/mod.js,
                modules/maths/ratios.js,
                modules/maths/cubic-bezier.js,
                modules/maths/to-cartesian.js,
                modules/maths/to-polar.js
                filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
            </div>
        </div>

        <div class="x-1 3x @2-x-7 column-grid grid">
            <div class="x-1">
                <h4 class="doctext-03">Arrays</h4>
                <template build-fn="docs:
                modules/lists/core.js,
                modules/lists/insert.js,
                modules/lists/last.js,
                modules/lists/remove.js,
                modules/lists/rest.js,
                modules/lists/take.js,
                modules/lists/unique.js,
                modules/lists/update.js
                filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
            </div>

            <div class="x-1">
                <h4 class="doctext-03">Time</h4>
                <template build-fn="docs:
                modules/date.js,
                modules/time.js
                filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
            </div>
        </div>
    </section>

    <section class="x-1 3x @1-6x @2-9x @3-x-2 columns-grid grid" data-targetable id="observer">
        <header class="x-1 3x @1-4x">
            <h2 class="doctext-02" style="font-size: 1.875rem;">Observer</h2>
            <p class="doctext-08">An observer is an ES6 Proxy of an object that intercepts and
            reports mutations. Import and create an observer:</p>
            <pre><code class="language-js">import { Observer, observe } from '/fn/module.js';
const data = Observer({ value: true });</code></pre>
            <p class="doctext-08">
            There is only ever one observer per object, ie, calling
            <code>Observer(object)</code> multiple times with the same object
            (or proxy of that object) always returns the same observer proxy.
            Observers can be observed for mutations with the observe function:
            </p>

            <pre><code class="language-js">observe('value', console.log, data);</code></pre>

            <p class="doctext-08">Mutations made to the observer proxy's <code>value</code>
            property are now logged to the console.</p>

            <pre><code class="language-js">data.value = false;   // Logs `false`</code></pre>
        </header>

        <div class="x-1 3x list-grid grid">
            <template build-fn="docs:
            modules/observer/observer.js,
            modules/observer/observe.js
            filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
        </div>
    </section>

    <!--div class="x-1 3x @2-x-2 @3-6x @4-5x @5-3x">
        <p class="doctext-08">Text things</p>
    </div-->

    <!--div class="x-1 3x @2-x-2 @3-6x @4-5x @5-3x" build-fn="docs:'./modules/stream.js'"></div-->

    <section class="x-1 3x @1-6x @2-9x @3-x-2 columns-grid grid" data-targetable id="stream">
        <header class="x-1 3x @1-4x">
            <h2 class="doctext-02" style="font-size: 1.875rem;">Stream</h2>
            <p class="doctext-08">Import and create a stream:</p>
            <pre><code class="language-js">import { Stream } from '/fn/module.js';
const stream = Stream.of(1,2,3,4);</code></pre>
        </header>

        <div class="x-1 3x list-grid grid">
            <template build-fn="docs:modules/stream.js filter-function each" build-src="/fn/templates.html#{[type]}-template"></template>
            <template build-fn="docs:modules/fn.js filter-property each" build-src="/fn/templates.html#{[type]}-template"></template>
        </div>

        <div class="x-1 3x @1-x-4 list-grid grid">
            <template build-fn="docs:modules/stream.js filter-method take:16 each" build-src="/fn/templates.html#{[type]}-template"></template>
        </div>

        <div class="x-1 3x @2-x-7 list-grid grid">
            <template build-fn="docs:modules/stream.js filter-method rest:16 each" build-src="/fn/templates.html#{[type]}-template"></template>
        </div>
    </section>

    <script build-remove type="module" src="../fn/docs-build.js"></script>

    <!-- Document interactivity -->
    <script type="module">
        import '../bolt/modules/device.js';
        import '../bolt/attributes/data-toggleable.js';
        import '../bolt/modules/data-targetable.js';
        import * as Fn from './module.js';
        window.Fn = Fn;
    </script>
</body>
