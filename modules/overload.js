/**
overload(fn, map)

For function overloading. Takes a `fn` that returns a string key, and a `map`
object of functions stored against keys. Returns a function that calls the
function at the key generated by calling `fn()` with all arguments.

Where a key is not in `map` but `map` contains the property `'default'`,
that default function is called. Where there is no default function an error
is thrown.

```
var handleEvent = overload((e) => e.type, {
    click:   (e) => {...},
    input:   (e) => {...},
    default: (e) => {...}
});
```
*/


export default function overload(fn, map) {
    return function overload() {
        const key     = fn.apply(this, arguments);
        const handler = (map[key] || map.default);

        if (!handler) {
            throw new Error('overload() no handler for "' + key + '"');
        }

        return handler.apply(this, arguments);
    };
}
